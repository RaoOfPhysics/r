% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/host.R
\docType{data}
\name{Host}
\alias{Host}
\title{A Host}
\format{\code{R6Class}.}
\usage{
Host
}
\description{
Hosts allows you to remotely create, get, run methods of, and delete instances of various types.
The types can be thought of a "services" provided by the host e.g. `RContext`, `FileSystemStorer`
}
\details{
The API of a host is similar to that of a HTTP server. It's methods names
(e.g. `post`, `get`) are similar to HTTP methods (e.g. `POST`, `GET`) but
the sematics sometimes differ (e.g. a host's `put()` method is used to call an
instance method)

A host's methods are exposed by `HostHttpServer` and `HostWebsocketServer`. 
Those other classes are responsible for tasks associated with their communication 
protocol (e.g. serialising and deserialising objects).

This is a singleton class. There should only ever be one `Host` in memory in each process 
(although, for purposes of testing, this is not enforced)
}
\section{new()}{


Create a new \code{Host}
}

\section{options()}{


Get a manifest for this host

The manifest describes the host and it's capabilities. It is used
by peer hosts to determine which "types" this host provides and
which "instances" have already been instantiated.
}

\section{post()}{


Create a new instance of a type

\describe{
  \item{type}{Type of instance}
  \item{options}{Options to be passed to type constructor}
  \item{return}{The ID string of the newly created instance}
}
}

\section{get()}{


Get an instance

\describe{
  \item{id}{ID of instance}
  \item{return}{The instance}
}
}

\section{put()}{


Call a method of an instance

\describe{
  \item{id}{ID of instance}
  \item{method}{Name of instance method}
  \item{args}{A list of of method arguments}
  \item{return}{The result of the method call}
}
}

\section{delete()}{


Delete an instance

\describe{
  \item{id}{ID of the instance}
}
}

\section{start()}{


Start serving this host

Currently, HTTP is the only server available
for hosts. We plan to implement a `HostWebsocketServer` soon.
}

\section{stop()}{


Stop serving this host. Stops all servers that are currently serving this host
}

\section{view()}{


View this host in the browser. Opens the default browser at the URL of this host
}

\section{servers}{


Get a list of server names for this host. Servers are identified by the protocol shorthand
e.g. `http` for `HostHttpServer`
}

\examples{
host$servers
host$start()
host$servers
host$stop()
}
\keyword{datasets}
