% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r-context.R
\docType{data}
\name{RContext}
\alias{RContext}
\title{A R context}
\format{\code{R6Class}.}
\usage{
RContext
}
\description{
An execution context for R code
}
\details{
In Stencila, a "context" is the thing that executes code for a particular programming language.
This is the context for R.
It implements the \code{Context} API so that it can talk to other parts of the platform,
including contexts for other languages, Documents, and Sheets.
}
\section{new()}{


Create a new \code{RContext}

Currently the parameter \code{closed} defaults to \code{FALSE} so that you can use
\code{library(somepackage)} to make a package available in subsequent calls to
\code{runCode} or \code{callCode}. In the future, it would be good to have a better machanism for that.

\describe{
  \item{local}{Context can not assign to the global environment. Default \code{TRUE}}
  \item{closed}{Context can not read from the global environment. Default \code{FALSE}}
}
}

\section{analyseCode()}{


Analyse R code and return the names of inputs, outputs
and the implicitly returned vaue expression

\describe{
  \item{code}{R code to be analysed}
  \item{exprOnly}{Ensure that the code is a simple expression?}
}
}

\section{executeCode()}{


Run R code within the context's scope

\describe{
  \item{code}{R code to be executed}
  \item{inputs}{A list with a data pack for each input}
  \item{exprOnly}{Ensure that the code is a simple expression?}
}
}

\section{callCode()}{


Run R code within a local function scope

\describe{
  \item{code}{R code to be executed}
  \item{inputs}{A list with a data pack for each input}
  \item{isolated}{Is the call isolated from the context's global environment}
}
}

\examples{
context <- RContext$new()

# Assign a variable within the context
context$runCode('my_var <- 42')

# Get the variable as an output value
context$runCode('my_var')

# The variable is NOT available in `callCode`
context$callCode('my_var')$errors[[1]]$message

# Intead, you can pass input values
context$callCode('x * y', list(x=pack(6), y=pack(7)))

# Returned output value can include plots
context$callCode('plot(1,1)')$output
}
\keyword{datasets}
